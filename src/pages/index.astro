---
import { getCollection, getEntry } from 'astro:content'

import Layout from '../layouts/Layout.astro'
import Card from '../components/Card.astro'
import { Icon } from 'astro-icon/components'
import Navigation from '@/components/navigation.astro'

// Get all entries from a collection.
// Requires the name of the collection as an argument.
// Example: retrieve `src/content/blog/**`
const allFeatures = await getCollection('features')

// Get a single entry from a collection.
// Requires the name of the collection and either
// the entry `slug` (content collections) or `id` (data collections)
// Example: retrieve `src/content/authors/grace-hopper.json`
const oneFeature = await getEntry('features', 'community')

const imageUrl: string = 'https://picsum.photos/seed/picsum/1200/800'

import { db, comments, authors, posts } from 'astro:db'

const commentDB = await db.select().from(comments)
const authorDB = await db.select().from(authors)
const postDB = await db.select().from(posts)
---

<Layout title="Welcome to Astro." description="this is the description for homepage.">
	<Navigation />
	<main class="mx-auto w-[800px] max-w-[calc(100%_-_2rem)] p-4 text-base text-white">
		<Icon
			class="absolute left-1/2 top-[50px] -z-[1] h-auto w-[220px] translate-x-[-50%]"
			name="astro"
		/>
		<h1 class="mb-16 mt-8 text-center text-[4rem] font-bold leading-4">
			Welcome to <span
				class="bg-gradient-to-r from-[rgb(var(--accent))] to-[rgb(var(--accent-light))] bg-clip-text text-transparent"
				>Astro</span
			>
		</h1>
		<p
			class="mb-8 rounded-lg border-[1px] border-[rgba(var(--accent-light),25%)] bg-gradient-to-r from-[rgba(var(--accent),66%)] to-[rgba(var(--accent),33%)] p-6"
		>
			To get started, open the directory <code
				class="rounded bg-[rgba(var(--accent-light),12%)] p-[0.3em_0.4em] text-sm font-bold text-[rgb(var(--accent-light))]"
				>src/pages</code
			> in your project.<br />
			<strong class="text-[rgb(var(--accent-light))]">Code Challenge:</strong> Tweak the "Welcome to
			Astro" message above.
		</p>
		<ul role="list" class="grid grid-cols-[repeat(auto-fit,minmax(24ch,1fr))] gap-8 p-0">
			{
				allFeatures.map((feature: any) => (
					<Card
						title={feature.data.title}
						body={feature.data.body}
						href={feature.data.href}
						icon={feature.data.icon}
					/>
				))
			}
		</ul>

		<h2 class="bg-gray-600 text-lg my-8">Authors</h2>
		{
			authorDB.map(({ id, name }) => (
				<article>
					<div class="">
						<strong>id:</strong> {id}
					</div>
					<div class="">
						<strong>name:</strong> {name}
					</div>
				</article>
			))
		}

<h2 class="bg-gray-600 text-lg my-8">Posts</h2>
		{
			postDB.map(
				({ id, title, content, authorId, createdAt, updatedAt }) => (
					<article class="my-4">
						<div class="">
							<strong>id:</strong> {id}
						</div>
						<div class="">
							<strong>title:</strong> {title}
						</div>
						<div class="">
							<strong>content:</strong> {content}
						</div>
						<div class="">
							<strong>authorId:</strong> {authorId}
						</div>
						<div class="">
							<strong>createdAt:</strong> {createdAt}
						</div>
						<div class="">
							<strong>updatedAt:</strong> {updatedAt}
						</div>
					</article>
				)
			)
		}


<h2 class="bg-gray-600 text-lg my-8">Comments</h2>
		{
			commentDB.map(
				({ id, userId, postId, body, likes, flagged }) => (
					<article class="my-4">
						<div class="">
							<strong>id:</strong> {id}
						</div>
						<div class="">
							<strong>userId:</strong> {userId}
						</div>
						<div class="">
							<strong>postId:</strong> {postId}
						</div>
						<div class="">
							<strong>body:</strong> {body}
						</div>
						<div class="">
							<strong>likes:</strong> {likes}
						</div>
						<div class="">
							<strong>flagged:</strong>
							<span
								set:html={
									flagged
										? '<span class="bg-red-400"> YES </span>'
										: '<span class="bg-green-400"> NO </span>'
								}
							/>
						</div>
					</article>
				)
			)
		}

	</main>
</Layout>
